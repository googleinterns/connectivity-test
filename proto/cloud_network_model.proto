// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package google.cloud.network.reachability;

import "google/protobuf/timestamp.proto";
import "proto/kubernetes.proto";
import "proto/model_errors.proto";
import "proto/rules.proto";

// Next id: 35
message Model {
  // Metadata of the project.
  optional Metadata metadata = 22;
  // A list of project IDs.
  repeated string project_ids = 27;
  // The organization id this project belongs to.
  optional string org_id = 14;
  repeated Network networks = 1;
  repeated Subnet subnets = 2;
  repeated Instance instances = 3;
  repeated Route routes = 4;
  repeated FirewallRule firewall_rules = 5;

  // Reserved external addresses need not -- but can be -- included here.
  // This serves two purposes:
  // 1) Associate meta information (name, ID) with an address. This may make the
  //    output of the analysis tool easier to interpret (e.g., "address xyz was
  //    used here" vs "IP 32.10.0.10 was used here").
  // 2) Mark an address without target as reserved. This allows the analysis
  //    tool to give more accurate feedback (e.g., "address 32.10.0.10 has no
  //    target" vs "address 32.10.0.10 unknown").
  repeated ExternalAddress external_addresses = 6;
  repeated ExternalIPv6Address external_v6_addresses = 10;

  repeated ForwardingRule forwarding_rules = 7;
  repeated InternalLBAddress ilb_addresses = 8;
  repeated ExternalLBAddress elb_addresses = 9;
  repeated ExternalLBIPv6Address elb_v6_addresses = 11;
  repeated VPNGateway vpn_gateways = 15;
  repeated VPNTunnel vpn_tunnels = 16;
  repeated InstanceGroup instance_groups = 17;
  repeated NetworkEndpointGroup network_endpoint_groups = 18;
  repeated BackendService backend_services = 19;
  repeated TargetPool target_pools = 20;
  repeated GKECluster gke_clusters = 21;
  repeated InterconnectAttachment interconnect_attachments = 23;
  optional Errors errors = 24;
  repeated HealthCheck health_checks = 25;
  repeated TargetInstance target_instances = 26;
  repeated UrlMap url_maps = 28;
  repeated LoadBalancerProxies lb_proxies = 29;
  repeated Address addresses = 30;
  repeated CloudSQLInstance cloud_sql_instances = 31;

  // Multi-tier firewall config applied to network by network URI.
  map<string, MultiTierFirewallConfig> network_firewall = 32;

  // FirewallConfig by its URI.
  map<string, FirewallConfig> firewall_configs = 33;

  repeated CloudRouter cloud_routers = 34;
}

message Metadata {
  // The time of the last update message of the project.
  optional google.protobuf.Timestamp last_update_time = 1;

  // The time of the last query using the project.
  optional google.protobuf.Timestamp last_query_time = 2;

  // The time when the current snapshot of project is pulled.
  optional google.protobuf.Timestamp last_full_snapshot_time = 3;

  // The time taken to generate the model, in seconds.
  optional int32 generation_latency = 4;
}

/*******************************************************************************
 * VPC Networks
 *******************************************************************************/
message Network {
  // An arbitrary but unique ID for the resource.
  required string id = 1;

  // Has no semantics, but is convenient to have around.
  required string name = 2;

  // Url of the nerwork.
  optional string url = 6;

  repeated string subnets = 3;

  repeated NetworkPeer peers = 4;

  enum RoutingMode {
    UNKNOWN = 0;
    GLOBAL = 1;
    REGIONAL = 2;
  }
  required RoutingMode routing_mode = 5;

  // All the regions this network has presence in. Including regions of all
  // subnetworks and regions of all VPN gateways.
  repeated string regions = 7;

  // The regions where imported custom routes have been downloaded.
  repeated string imported_routes_downloaded_regions = 8;
}

// Next id: 13
message Subnet {
  // An arbitrary but unique ID for the resource.
  required string id = 1;

  // Has no semantics, but is convenient to have around.
  required string name = 2;

  // Url of the subnet.
  optional string url = 10;

  // The id of the network that the subnet belongs to.
  required string network = 3;

  // The address space of this subnetwork.
  required Ipv4Range ipv4_range = 4;

  // Secondary IP ranges.
  repeated Ipv4Range secondary_ranges = 6;

  // Region for the subnet if available.
  optional string region = 5;

  // Does this subnet have private Google access?
  optional bool private_google_access = 9;

  // cloud nat for the subnet.
  repeated CloudNat cloud_nats = 12;
}

message CloudNat {
  // Ranges that are NAT'd.
  repeated Ipv4Range nat_ranges = 1;
  // Configured NAT IPs.
  repeated uint32 nat_ips = 2;
}

message NetworkPeer {
  // Name of the network peer, given by our customer.
  required string name = 1;

  // ID of the peered network.
  required string peer_network = 3;

  // States for Network Peering.
  enum NetworkPeeringState {
    UNKNOWN = 0;
    // There is no matching configuration on the peer, including the case when
    // peer does not exist.
    INACTIVE = 1;
    // Matching configuration exists on the peer.
    ACTIVE = 2;
  }

  // [Output Only] State for the peering.
  required NetworkPeeringState state = 4;

  // Whether to import custom routes from the peered network
  optional bool import_custom_routes = 5;

  // Does the network export custom routes to peering network.
  optional bool export_custom_routes = 6;
}

message InterconnectAttachment {
  // Name of the interconnect attachment, given by our customer.
  required string name = 1;

  // ID of the interconnect attachment.
  required string id = 2;

  // Url of the interconnect attachment.
  required string url = 3;

  // The routes advertised to the interconnect attachment by BGP.
  repeated Ipv4Range advertised_routes = 4;

  // The region of the interconnect attachment.
  optional string region = 5;
}

/*******************************************************************************
 * HOST INSTANCES (VMs)
 *******************************************************************************/
message Instance {
  // An arbitrary but unique ID for the resource.
  optional string id = 1;

  // Has no semantics, but is convenient to have around.
  optional string name = 2;

  // Url of the instance.
  optional string url = 11;

  optional string network = 3;
  optional uint32 ip = 4;
  repeated Attribute attributes = 5;
  optional bool can_ip_forward = 6;
  repeated NamedPort named_ports = 8;
  repeated NetworkInterface nics = 10;
  // The status of a VM, used to differentiate VM that is RUNNING or STOPPED.
  optional string status = 12;
  // Name of a region where the instance is configured.
  optional string region = 13;
}

// Each interface must have internal IP, optional external IP, and IP alias.
// Each interface must be in a different network as others, their ranges
// cannot overlap.
message NetworkInterface {
  // name is usually like nic0, nic1, nic2 etc. Since the network interface is
  // nested in message Instance, no need to prefix with project or VM name
  // to make them unique.
  optional string name = 1;
  // Network ID.
  optional string network = 2;
  optional uint32 ip = 3;
  optional uint32 external_ip = 4;
  repeated Ipv4Range alias_ip_ranges = 5;
}

// A mapping from a port name to a port number.
message NamedPort {
  required string name = 1;
  required uint32 number = 2;
}

// Address resource.
message Address {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;

  oneof address {
    uint32 ip_address = 4;
    Uint128 ipv6_address = 5;
  }

  optional string status = 6;
  optional string address_type = 7;

  // List of resources URIs that are using the address.
  repeated string users = 8;
  // The readable format of the address.
  optional string address_value = 9;
}

/*******************************************************************************
 * RESERVED IP ADDRESSES
 *******************************************************************************/
// External IPv4 addresses.
message ExternalAddress {
  // An arbitrary but unique ID for the resource.
  required string id = 1;

  // Has no semantics, but is convenient to have around.
  required string name = 2;

  // Url of the external address.
  optional string url = 5;

  // The external IPv4 address.
  required uint32 ip = 3;

  // The instance this address routes to.
  optional string target = 4;
}

// External IPv6 addresses.
message ExternalIPv6Address {
  // An arbitrary but unique ID for the resource.
  required string id = 1;

  // Has no semantics, but is convenient to have around.
  required string name = 2;

  // Url of the external IPv6 address.
  optional string url = 5;

  // The external IPv6 address.
  required Uint128 ip = 3;

  // The instance this address routes to.
  optional string target = 4;
}

// VIP for internal load balancers.
message InternalLBAddress {
  // ID of the forwarding rule attached.
  required string id = 1;

  // Name of the forwarding rule attached.
  required string name = 2;

  // URL of the forwarding rule attached.
  optional string url = 6;

  // The VIP address. For now, only support IPv4.
  required uint32 vip = 3;

  // The id of the Forwarding Rule used by the Load Balancer to which this
  // address points.
  required string forwarding_rule = 4;

  // The network id where this ILB address is allocated from.
  required string network = 5;
}

// IPv4 VIP for external load balancers.
message ExternalLBAddress {
  // ID of the forwarding rule attached.
  required string id = 1;

  // Name of the forwarding rule attached.
  required string name = 2;

  // URL of the forwarding rule attached.
  optional string url = 5;

  // The VIP address. It only support IPv4 address.
  required uint32 vip = 3;

  // The id of the Forwarding Rule used by the Load Balancer to which this
  // address points.
  required string forwarding_rule = 4;
}

// IPv6 VIP for external load balancers.
message ExternalLBIPv6Address {
  // ID of the forwarding rule attached.
  required string id = 1;

  // Name of the forwarding rule attached.
  required string name = 2;

  // URL of the forwarding rule attached.
  optional string url = 5;

  // The VIP address. It only support IPv6 address.
  required Uint128 vip = 3;

  // The id of the Forwarding Rule used by the Load Balancer to which this
  // address points.
  required string forwarding_rule = 4;
}

/*******************************************************************************
 * VPN GATEWAYS AND TUNNELS
 *******************************************************************************/
// Next id: 7
message VPNGateway {
  // An arbitrary but unique ID for the resource.
  optional string id = 1;

  // Has no semantics, but is convenient to have around.
  optional string name = 2;

  // Url of the VPN gateway.
  optional string url = 5;

  // Url of the network that this VPN gateway belongs to.
  optional string network = 3;

  // The IP addresses of the VPN gateway. Gateways of classic VPN have one IP
  // address, and gateways of HA VPN has two IP addresses. It only supports IPv4
  // addresses.
  repeated uint32 ip = 4;

  // Name of a GCP region where the VPN gateway is configured.
  optional string region = 6;
}

// Next id: 12
message VPNTunnel {
  // Types of VPN routing policy. For more details see [Networks and Tunnel
  // routing](/vpn/docs/concepts/choosing-networks-routing/).
  enum RoutingType {
    // Unspecified type. Default value.
    ROUTING_TYPE_UNSPECIFIED = 0;
    // Route based VPN.
    ROUTE_BASED = 1;
    // Policy based routing.
    POLICY_BASED = 2;
    // Dynamic (BGP) routing.
    DYNAMIC = 3;
  }

  // An arbitrary but unique ID for the resource.
  optional string id = 1;

  // Has no semantics, but is convenient to have around.
  optional string name = 2;

  // Url of the VPN tunnel.
  optional string url = 5;

  // IP address of the peer VPN gateway. Only IPv4 is supported.
  optional uint32 peer_ip = 3;

  // The id of the local VPN gateway that this VPN tunnel is attached to.
  optional string vpn_gateway = 4;

  // The interface of the local VPN gateway that this VPN tunnel is attached to.
  // HA VPN has two interfaces, and classic VPN has one interface.
  optional uint32 vpn_gateway_interface = 11;

  // The routes advertised to its peer gateway. Routes can be advertised by
  // either BGP or static configuration.
  repeated Ipv4Range advertised_routes = 6;

  // Name of a region where the VPN tunnel is configured.
  optional string region = 7;

  // Type of the routing policy.
  optional RoutingType routing_type = 8;

  // Status of VPN tunnel.
  optional string status = 9;
}

message InstanceGroup {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional string region = 4;
  optional string zone = 5;
  optional uint32 size = 6;
  repeated NamedPort named_ports = 7;
  repeated string instances = 8;
  optional bool resolved = 9;
}

message NetworkEndpointGroup {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional string zone = 4;
  optional string network = 5;
}

message BackendService {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional string port_name = 4;
  repeated string backends = 6;
  optional string health_check_url = 8;
}

message TargetPool {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  repeated string instances = 4;
  optional string health_check_url = 6;
}

message TargetInstance {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional string instance = 4;
}

message HealthCheck {
  enum PortSpecification {
    // Not specified.
    UNSPECIFIED = 0;
    USE_FIXED_PORT = 1;
    USE_NAMED_PORT = 2;
    USE_SERVING_PORT = 3;
  }
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional uint32 port = 4;
  optional string port_name = 5;
  optional PortSpecification port_specification = 6;
}

message UrlMap {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  optional string default_service = 4;
}

message LoadBalancerProxies {
  optional string id = 1;
  optional string name = 2;
  optional string url = 3;
  oneof backend {
    string url_map = 4;
    string backend_service = 5;
  }
}

// Record errors in generating the network model.
// The errors could be missing source input, or due to validation error.
message Errors {
  // Error due to not able to access the config.
  repeated IngestionError ingestion_errors = 1;
  // Error due to not able to parse the config.
  repeated ParserError parser_errors = 2;
}

// Cloud SQL instance configuration.
// Next id: 10
message CloudSQLInstance {
  // Cloud SQL instance resource id.
  optional string id = 1;
  // Cloud SQL instance name, prefixed with project name.
  optional string name = 2;
  // Cloud SQL instance self-link.
  optional string url = 3;
  // Region in which the Cloud SQL instance is running.
  optional string region = 4;

  // Private IP of the Cloud SQL instance if any.
  optional uint32 private_ip = 5;
  // Public IP of the Cloud SQL instance if any.
  optional uint32 public_ip = 6;

  // URI of the network the Cloud SQL instance is in.
  optional string network = 7;
  // All the ranges that are authorized for Cloud SQL instance access.
  repeated Ipv4Range authorized_ranges = 8;

  // The database engine type and version for the Cloud SQL instance.
  optional string database_version = 9;
}

/*******************************************************************************
 * Hierarchical Firewalls
 *******************************************************************************/

// FirewallConfig is a container for firewall rules.
message FirewallConfig {
  optional string uri = 1;
  optional string display_name = 2;
  optional Type type = 3;
  enum Type {
    UNSPECIFIED = 0;
    GCP_HIERARCHICAL_FIREWALL_POLICY = 1;
    GCP_NETWORK_FIREWALL_POLICY = 2;
    GCP_LEGACY_FIREWALLS = 3;
  }
  // Order of rules is defined by their priority.
  // In a multi-tier firewall config, all rules in any FirewallConfig except for
  // the bottom tier FirewallConfig have different priority. In the bottom tier
  // FirewallConfig, if several rules have the same priority, deny rule precedes
  // allow rule.
  repeated FirewallRule rules = 4;
}

// Multi-tier firewall config.
// It is evaluated in a top-down order, from the first FirewallConfig to the
// last. Rules in FirewallConfig are evaluated in order of priority. If none of
// the rules in FirewallConfig match, the evaluation continues from a
// FirewallConfig on the next tier. If packet matches GOTO_NEXT rule, then the
// evaluation is delegated to FirewallConfig on the next tier, and the rest of
// the rules in current FirewallConfig are ignored.
message MultiTierFirewallConfig {
  // URIs of firewall configs, one for each node that has firewall defined,
  // starting from organization node down to network node, that is in top-down
  // order.
  repeated string firewall_config_uris = 1;
}

// Whether to use Google managed advertisement or customer defined
// advertisement.
enum AdvertiseMode {
  ADVERTISE_MODE_UNSPECIFIED = 0;
  DEFAULT = 1;
  CUSTOM = 2;
}

// Named groups of prefixes that the router can auto-advertise.
enum AdvertisedGroup {
  ADVERTISED_GROUP_UNSPECIFIED = 0;
  // Advertise all available subnets (including peer VPC subnets).
  ALL_SUBNETS = 1;
  // Advertise the router's own VPC subnets.
  ALL_VPC_SUBNETS = 2;
  // Advertise subnets in peered network of the router's VPC.
  ALL_PEER_VPC_SUBNETS = 3;
}

// Configurations of a BGP peering of a cloud router.
message BgpPeering {
  // Name of the BGP peering.
  optional string name = 1;
  // Name of the interface of the cloud router used to establish BGP peering.
  optional string interface_name = 2;
  // IPv4 address of the local interface.
  optional uint32 ip_address = 3;
  // IPv4 address of the interface in the peering router.
  optional uint32 peer_ip_address = 4;
  // AS number of the peering router.
  optional uint32 peer_asn = 5;
  // The priority of routes advertised to the peering router.
  optional uint32 advertised_route_priority = 6;
  // Which mode to use for advertisement. Options are DEFAULT and CUSTOM.
  optional AdvertiseMode advertise_mode = 7;
  // Prefix groups to advertise in CUSTOM mode.
  repeated AdvertisedGroup advertise_groups = 8;
  // Custom prefixes configured by user to advertise in addition to prefix
  // groups in CUSTOM mode.
  repeated Ipv4Range advertised_ip_ranges = 9;
  oneof linked_resource {
    // The URI of linked VPN tunnel.
    string linked_vpn_tunnel = 10;
    // The URI of linked interconnect attachment.
    string linked_interconnect_attachment = 11;
  }
  message PeeringStatus {
    // The list of IP ranges that the BGP peering is advertising.
    repeated Ipv4Range advertised_ip_ranges = 1;
  }
  optional PeeringStatus peering_status = 12;
}

// Configurations of BGP of a cloud router.
message BgpConfig {
  // AS number.
  optional uint32 asn = 1;
  // Which mode to use for advertisement. Options are DEFAULT and CUSTOM.
  optional AdvertiseMode advertise_mode = 2;
  // Prefix groups to advertise in CUSTOM mode.
  repeated AdvertisedGroup advertised_groups = 3;
  // Custom prefixes to advertise in addition to prefix groups in CUSTOM mode.
  repeated Ipv4Range advertised_ip_ranges = 9;
}

// Configurations of cloud router and its BGP peers.
message CloudRouter {
  // ID of the cloud router.
  optional string id = 1;
  // Name of the cloud router.
  optional string name = 2;
  // region of the cloud router.
  optional string region = 3;
  // URI of the network of the cloud router.
  optional string network_uri = 4;
  // URI of the cloud router.
  optional string uri = 5;
  // BGP configurations of the cloud router.
  optional BgpConfig bgp = 6;
  // Configurations of BGP peerings of the router.
  repeated BgpPeering bgp_peerings = 7;
}
